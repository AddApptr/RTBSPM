// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RTBSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import CoreLocation
import CoreTelephony
import Foundation
@_exported import RTBSDK
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol RTBDSPInterstitialProtocol : RTBSDK.RTBDSAdPProtocol {
  @objc var adDelegate: (any RTBSDK.RTBDSPInterstitialDelegate)? { get set }
  @objc @discardableResult
  func show(viewController: UIKit.UIViewController) -> Swift.Bool
}
@objc public protocol RTBDSPInterstitialDelegate {
  @objc func dspAdViewDidReceiveAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc func dspAdView(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func dspAdViewDidRecordClick(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc func dspAdViewDidPauseForAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc func dspAdViewDidResumeAfterAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class RTBSDKManager : ObjectiveC.NSObject {
  public static let shared: RTBSDK.RTBSDKManager
  public var isPaid: Swift.Bool?
  public var isChildDirected: Swift.Bool?
  public var isGDPRApplies: Swift.Bool?
  public var testModeEnabled: Swift.Bool?
  public var logLevel: RTBSDK.RTBLogLevel? {
    get
    set
  }
  public var useGeoLocation: Swift.Bool
  public var sdkVersion: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class RTBBannerSize : ObjectiveC.NSObject {
  public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc deinit
}
extension RTBSDK.RTBBannerSize {
  public static let banner320x50: RTBSDK.RTBBannerSize
  public static let banner300x250: RTBSDK.RTBBannerSize
  public static let banner728x90: RTBSDK.RTBBannerSize
}
@_hasMissingDesignatedInitializers @objc public class RTBBidderExtraInfo : ObjectiveC.NSObject {
  @objc public var clickURL: Swift.String?
  @objc public var impressionURL: Swift.String?
  @objc deinit
}
@objc public class RTBFullscreenRequestConfiguration : ObjectiveC.NSObject {
  @objc public var bidFloor: Foundation.NSNumber?
  @objc public var sellerId: Swift.String?
  @objc public init(placementId: Swift.Int, iTunesAppId: Swift.String)
  @objc deinit
}
@objc public protocol RTBDSAdPProtocol : RTBSDK.RTBDSPProtocol {
  @objc var requestId: Swift.String? { get set }
  @objc var viewController: UIKit.UIViewController? { get set }
  @objc var adID: Swift.String? { get set }
  @objc func unload()
  @objc func pause()
  @objc func resume(controller: UIKit.UIViewController)
}
@objc public protocol RTBBannerViewDelegate {
  @objc func bannerViewDidReceiveAd(_ bannerView: RTBSDK.RTBBannerView, priceCPM: Swift.Float, networkName: Swift.String)
  @objc func bannerView(_ bannerView: RTBSDK.RTBBannerView, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func bannerViewDidRecordClick(_ bannerView: RTBSDK.RTBBannerView, networkName: Swift.String)
  @objc func bannerViewDidPauseForAd(_ bannerView: RTBSDK.RTBBannerView, networkName: Swift.String)
  @objc func bannerViewDidResumeAfterAd(_ bannerView: RTBSDK.RTBBannerView, networkName: Swift.String)
}
@objc public protocol RTBDSPProtocol {
  @objc var bidderName: Swift.String { get }
  @objc var signalsDelegate: (any RTBSDK.RTBDSPDelegate)? { get set }
  @objc init()
  @objc func loadSignals()
  @objc func renderCreative(_ creative: Swift.String, extraInfo: RTBSDK.RTBBidderExtraInfo)
}
@objc public protocol RTBDSPDelegate {
  @objc func didCollectSignals(_ dsp: any RTBSDK.RTBDSPProtocol, signals: [Swift.String : Any])
  @objc func didFailToCollectSignals(_ dsp: any RTBSDK.RTBDSPProtocol, error: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RTBBannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any RTBSDK.RTBBannerViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public init(size: RTBSDK.RTBBannerSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) public func load(configuration: RTBSDK.RTBBannerRequestConfiguration)
  @_Concurrency.MainActor(unsafe) public func setDSPAdapters(_ adapters: [any RTBSDK.RTBDSPBannerProtocol])
  @objc deinit
}
extension RTBSDK.RTBBannerView : RTBSDK.RTBDSPBannerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func dspAdViewDidReceiveAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func dspAdView(_ ad: any RTBSDK.RTBDSPBannerProtocol, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func dspAdViewDidRecordClick(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func dspAdViewDidPauseForAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func dspAdViewDidResumeAfterAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class RTBFullscreenAd : ObjectiveC.NSObject {
  weak public var delegate: (any RTBSDK.RTBFullscreenDelegate)?
  @discardableResult
  @objc public func load(configuration: RTBSDK.RTBFullscreenRequestConfiguration) -> Swift.Bool
  @discardableResult
  @objc public func show(viewController: UIKit.UIViewController) -> Swift.Bool
  public func setDSPAdapters(_ adapters: [any RTBSDK.RTBDSPInterstitialProtocol])
  @objc override dynamic public init()
  @objc deinit
}
extension RTBSDK.RTBFullscreenAd : RTBSDK.RTBDSPInterstitialDelegate {
  @objc dynamic public func dspAdViewDidReceiveAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc dynamic public func dspAdView(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc dynamic public func dspAdViewDidRecordClick(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc dynamic public func dspAdViewDidPauseForAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc dynamic public func dspAdViewDidResumeAfterAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
}
@objc public enum RTBLogLevel : Swift.Int, Swift.CaseIterable {
  case verbose = 1
  case debug
  case info
  case warn
  case error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RTBSDK.RTBLogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [RTBSDK.RTBLogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RTBFullscreenDelegate {
  @objc func fullscreenAdDidReceiveAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, priceCPM: Swift.Float, networkName: Swift.String)
  @objc func fullscreenAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func fullscreenAdDidRecordClick(_ fullscreenAd: RTBSDK.RTBFullscreenAd, networkName: Swift.String)
  @objc func fullscreenAdDidPauseForAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, networkName: Swift.String)
  @objc func fullscreenAdDidResumeAfterAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, networkName: Swift.String)
}
@objc public protocol RTBDSPBannerProtocol : RTBSDK.RTBDSAdPProtocol {
  @objc var bannerDelegate: (any RTBSDK.RTBDSPBannerDelegate)? { get set }
  @objc func setBannerSize(size: CoreFoundation.CGSize)
  @objc func getBannerView() -> UIKit.UIView?
}
@objc public protocol RTBDSPBannerDelegate {
  @objc func dspAdViewDidReceiveAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @objc func dspAdView(_ ad: any RTBSDK.RTBDSPBannerProtocol, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func dspAdViewDidRecordClick(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @objc func dspAdViewDidPauseForAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @objc func dspAdViewDidResumeAfterAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class RTBLogger : ObjectiveC.NSObject {
  public static func log(level: RTBSDK.RTBLogLevel, message: Swift.String, withoutAATFormatting: Swift.Bool = false, forceLog: Swift.Bool = false, callingMethod: Swift.String = #function, file: Swift.String = #file, tag: Swift.String = "AATKit")
  @objc override dynamic public init()
  @objc deinit
}
@objc public class RTBBannerRequestConfiguration : ObjectiveC.NSObject {
  @objc public var bidFloor: Foundation.NSNumber?
  @objc public var sellerId: Swift.String?
  @objc public init(placementId: Swift.Int, iTunesAppId: Swift.String)
  @objc deinit
}
extension RTBSDK.RTBLogLevel : Swift.Equatable {}
extension RTBSDK.RTBLogLevel : Swift.Hashable {}
extension RTBSDK.RTBLogLevel : Swift.RawRepresentable {}
