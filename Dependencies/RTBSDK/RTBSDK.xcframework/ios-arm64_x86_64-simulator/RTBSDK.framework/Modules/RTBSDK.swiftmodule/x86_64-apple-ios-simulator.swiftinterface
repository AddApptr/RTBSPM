// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RTBSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFAudio
import AVFoundation
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import CoreLocation
import CoreTelephony
import Foundation
import OMSDK_Addapptr
import PhotosUI
@_exported import RTBSDK
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import libxml2
@_inheritsConvenienceInitializers @objc public class RTBBannerAdProvider : ObjectiveC.NSObject {
  @objc public static func load(configuration: RTBSDK.RTBBannerRequestConfiguration, size: RTBSDK.RTBBannerSize, userAgent: Swift.String, loadDelegate: any RTBSDK.RTBBannerAdLoadDelegate)
  @objc public static func getBannerView(bannerBid: RTBSDK.RTBBannerBid, delegate: any RTBSDK.RTBBannerAdInteractionDelegate) -> UIKit.UIView?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RTBDSPInterstitialProtocol : RTBSDK.RTBDSAdPProtocol {
  @objc var adDelegate: (any RTBSDK.RTBDSPInterstitialDelegate)? { get set }
  @objc @discardableResult
  func show(viewController: UIKit.UIViewController) -> Swift.Bool
}
@objc public protocol RTBDSPInterstitialDelegate {
  @objc func dspAdViewDidReceiveAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc func dspAdView(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func dspAdViewDidRecordClick(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc func dspAdViewDidPauseForAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc func dspAdViewDidResumeAfterAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class RTBSDKManager : ObjectiveC.NSObject {
  @objc public static let shared: RTBSDK.RTBSDKManager
  final public var isPaid: Swift.Bool?
  final public var isChildDirected: Swift.Bool?
  @objc(isChildDirected) final public var objc_isChildDirected: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  final public var isGDPRApplies: Swift.Bool?
  @objc(isGDPRApplies) final public var objc_isGDPRApplies: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  final public var testModeEnabled: Swift.Bool?
  final public var logLevel: RTBSDK.RTBLogLevel? {
    get
    set
  }
  @objc final public var useGeoLocation: Swift.Bool
  @objc final public let sdkVersion: Swift.String
  @objc deinit
}
@objc public protocol RTBNativeAdLoaderDelegate {
  @objc func nativeAdDidReceiveAd(_ nativeAdLoader: RTBSDK.RTBNativeAdLoader, bidInfo: RTBSDK.RTBBidInfo, networkName: Swift.String)
  @objc func nativeAdView(_ nativeAdLoader: RTBSDK.RTBNativeAdLoader, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
}
@objc public class RTBBannerSize : ObjectiveC.NSObject {
  @objc public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc deinit
}
extension RTBSDK.RTBBannerSize {
  @objc public static let banner320x50: RTBSDK.RTBBannerSize
  @objc public static let banner300x250: RTBSDK.RTBBannerSize
  @objc public static let banner728x90: RTBSDK.RTBBannerSize
}
@_hasMissingDesignatedInitializers @objc public class RTBBidderExtraInfo : ObjectiveC.NSObject {
  @objc public var clickURL: Swift.String?
  @objc public var impressionURL: Swift.String?
  @objc deinit
}
@objc public class RTBRequestConfiguration : ObjectiveC.NSObject {
  @objc public var bidFloor: Foundation.NSNumber?
  @objc public var sellerId: Swift.String?
  @objc public var userTargeting: RTBSDK.RTBUserTargeting? {
    @objc get
    @objc set
  }
  @objc public init(placementId: Swift.Int, iTunesAppId: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RTBNativeAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any RTBSDK.RTBNativeAdInteractionDelegate)?
  @objc public var title: Swift.String?
  @objc public var callToAction: Swift.String?
  @objc public var body: Swift.String?
  @objc public var icon: Swift.String?
  @objc public var image: Swift.String?
  @objc public var rating: Foundation.NSNumber?
  @objc public var sponsered: Swift.String?
  @objc deinit
  @objc public func trackImpression(view: UIKit.UIView)
  @objc public func trackImpression(view: UIKit.UIView, clickableViews: [UIKit.UIView])
}
@_inheritsConvenienceInitializers @objc public class RTBFullscreenRequestConfiguration : RTBSDK.RTBRequestConfiguration {
  @objc public var forceCloseButtonForMraid: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public init(placementId: Swift.Int, iTunesAppId: Swift.String)
  @objc deinit
}
@objc final public class RTBUserTargeting : ObjectiveC.NSObject {
  @objc public init(userId: Swift.String? = nil, gender: RTBSDK.RTBGender = .unknown, yearOfBirth: Foundation.NSNumber? = nil, keywords: [Swift.String]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol RTBDSAdPProtocol : RTBSDK.RTBDSPProtocol {
  @objc var requestId: Swift.String? { get set }
  @objc var viewController: UIKit.UIViewController? { get set }
  @objc var adID: Swift.String? { get set }
  @objc func unload()
  @objc func pause()
  @objc func resume(controller: UIKit.UIViewController)
}
@_inheritsConvenienceInitializers @objc public class RTBRewardedVideoRequestConfiguration : RTBSDK.RTBRequestConfiguration {
  @objc public var muteOnStart: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public init(placementId: Swift.Int, iTunesAppId: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RTBBidInfo : ObjectiveC.NSObject {
  @objc public var priceCPM: Swift.Float
  @objc public var bidder: Swift.String
  @objc public var creativeId: Swift.String?
  @objc public var campaignId: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RTBNativeAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: (any RTBSDK.RTBNativeAdLoaderDelegate)?
  @objc public func load(configuration: RTBSDK.RTBNativeAdRequestConfiguration, userAgent: Swift.String)
  @objc public func load(configuration: RTBSDK.RTBNativeAdRequestConfiguration)
  @objc public func getNativeAd() -> RTBSDK.RTBNativeAd?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RTBBannerViewDelegate {
  @objc func bannerViewDidReceiveAd(_ bannerView: RTBSDK.RTBBannerView, bidInfo: RTBSDK.RTBBidInfo, networkName: Swift.String)
  @objc func bannerView(_ bannerView: RTBSDK.RTBBannerView, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func bannerView(_ bannerView: RTBSDK.RTBBannerView, didFailToRender errorMessage: Swift.String, networkName: Swift.String)
  @objc func bannerViewDidRecordClick(_ bannerView: RTBSDK.RTBBannerView, networkName: Swift.String)
  @objc func bannerViewDidPauseForAd(_ bannerView: RTBSDK.RTBBannerView, networkName: Swift.String)
  @objc func bannerViewDidResumeAfterAd(_ bannerView: RTBSDK.RTBBannerView, networkName: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class RTBNativeAdRequestConfiguration : RTBSDK.RTBRequestConfiguration {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public init(placementId: Swift.Int, iTunesAppId: Swift.String)
  @objc deinit
}
@objc public protocol RTBDSPProtocol {
  @objc var bidderName: Swift.String { get }
  @objc var signalsDelegate: (any RTBSDK.RTBDSPDelegate)? { get set }
  @objc init()
  @objc func loadSignals()
  @objc func renderCreative(_ creative: Swift.String, extraInfo: RTBSDK.RTBBidderExtraInfo)
}
@objc public protocol RTBDSPDelegate {
  @objc func didCollectSignals(_ dsp: any RTBSDK.RTBDSPProtocol, signals: [Swift.String : Any])
  @objc func didFailToCollectSignals(_ dsp: any RTBSDK.RTBDSPProtocol, error: Swift.String)
}
@objc public protocol RTBRewardedVideoAdDelegate {
  @objc func rewardedVideoAdDidReceiveAd(_ rewardedVideoAd: RTBSDK.RTBRewardedVideoAd, bidInfo: RTBSDK.RTBBidInfo, networkName: Swift.String)
  @objc func rewardedVideoAd(_ rewardedVideoAd: RTBSDK.RTBRewardedVideoAd, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func rewardedVideoAdDidRecordClick(_ rewardedVideoAd: RTBSDK.RTBRewardedVideoAd, networkName: Swift.String)
  @objc func rewardedVideoAdDidPauseForAd(_ rewardedVideoAd: RTBSDK.RTBRewardedVideoAd, networkName: Swift.String)
  @objc func rewardedVideoAdDidResumeAfterAd(_ rewardedVideoAd: RTBSDK.RTBRewardedVideoAd, networkName: Swift.String)
  @objc func rewardedVideoAdDidReceiveReward(_ rewardedVideoAd: RTBSDK.RTBRewardedVideoAd, networkName: Swift.String)
}
@objc public protocol RTBBannerAdLoadDelegate {
  @objc func bannerAdDidReceiveAd(bannerBid: RTBSDK.RTBBannerBid)
  @objc func bannerAdDidFailToReceiveAd(errorMessage: Swift.String)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class RTBBannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any RTBSDK.RTBBannerViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(size: RTBSDK.RTBBannerSize)
  @objc @_Concurrency.MainActor @preconcurrency public func load(configuration: RTBSDK.RTBBannerRequestConfiguration)
  @objc @_Concurrency.MainActor @preconcurrency public func setDSPAdapters(_ adapters: [any RTBSDK.RTBDSPBannerProtocol])
  @objc deinit
}
@objc public protocol RTBNativeAdInteractionDelegate {
  @objc func nativeAdView(_ nativeAd: RTBSDK.RTBNativeAd, didFailToRender errorMessage: Swift.String, networkName: Swift.String)
  @objc func nativeAdDidRecordClick(_ nativeAd: RTBSDK.RTBNativeAd, networkName: Swift.String)
  @objc func nativeAdDidPauseForAd(_ nativeAd: RTBSDK.RTBNativeAd, networkName: Swift.String)
  @objc func nativeAdDidResumeAfterAd(_ nativeAd: RTBSDK.RTBNativeAd, networkName: Swift.String)
}
@objc public protocol RTBBannerAdInteractionDelegate {
  @objc func bannerAdDidRecordClick()
  @objc func bannerAdDidPauseForAd()
  @objc func bannerAdDidResumeAfterAd()
  @objc func bannerAdDidFailToRender(error: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class RTBRewardedVideoAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any RTBSDK.RTBRewardedVideoAdDelegate)?
  @objc override dynamic public init()
  @discardableResult
  @objc public func load(configuration: RTBSDK.RTBRewardedVideoRequestConfiguration) -> Swift.Bool
  @discardableResult
  @objc public func show(viewController: UIKit.UIViewController) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RTBFullscreenAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any RTBSDK.RTBFullscreenDelegate)?
  @objc override dynamic public init()
  @discardableResult
  @objc public func load(configuration: RTBSDK.RTBFullscreenRequestConfiguration) -> Swift.Bool
  @discardableResult
  @objc public func show(viewController: UIKit.UIViewController) -> Swift.Bool
  public func setDSPAdapters(_ adapters: [any RTBSDK.RTBDSPInterstitialProtocol])
  @objc deinit
}
extension RTBSDK.RTBFullscreenAd : RTBSDK.RTBDSPInterstitialDelegate {
  @objc dynamic public func dspAdViewDidReceiveAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc dynamic public func dspAdView(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc dynamic public func dspAdViewDidRecordClick(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc dynamic public func dspAdViewDidPauseForAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
  @objc dynamic public func dspAdViewDidResumeAfterAd(_ ad: any RTBSDK.RTBDSPInterstitialProtocol, networkName: Swift.String)
}
@objc public enum RTBLogLevel : Swift.Int, Swift.CaseIterable {
  case verbose = 1
  case debug
  case info
  case warn
  case error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RTBSDK.RTBLogLevel]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RTBSDK.RTBLogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RTBFullscreenDelegate {
  @objc func fullscreenAdDidReceiveAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, bidInfo: RTBSDK.RTBBidInfo, networkName: Swift.String)
  @objc func fullscreenAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func fullscreenAdDidRecordClick(_ fullscreenAd: RTBSDK.RTBFullscreenAd, networkName: Swift.String)
  @objc func fullscreenAdDidPauseForAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, networkName: Swift.String)
  @objc func fullscreenAdDidResumeAfterAd(_ fullscreenAd: RTBSDK.RTBFullscreenAd, networkName: Swift.String)
}
@_hasMissingDesignatedInitializers @objc public class RTBBannerBid : RTBSDK.RTBBidInfo {
  @objc deinit
}
@objc public protocol RTBDSPBannerProtocol : RTBSDK.RTBDSAdPProtocol {
  @objc var bannerDelegate: (any RTBSDK.RTBDSPBannerDelegate)? { get set }
  @objc func setBannerSize(size: CoreFoundation.CGSize)
  @objc func getBannerView() -> UIKit.UIView?
}
@objc public protocol RTBDSPBannerDelegate {
  @objc func dspAdViewDidReceiveAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @objc func dspAdView(_ ad: any RTBSDK.RTBDSPBannerProtocol, didFailToReceiveAd errorMessage: Swift.String, networkName: Swift.String)
  @objc func dspAdViewDidRecordClick(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @objc func dspAdViewDidPauseForAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
  @objc func dspAdViewDidResumeAfterAd(_ ad: any RTBSDK.RTBDSPBannerProtocol, networkName: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class RTBLogger : ObjectiveC.NSObject {
  public static func log(level: RTBSDK.RTBLogLevel, message: Swift.String, withoutAATFormatting: Swift.Bool = false, forceLog: Swift.Bool = false, callingMethod: Swift.String = #function, file: Swift.String = #file, tag: Swift.String = "RTBSDK")
  @objc override dynamic public init()
  @objc deinit
}
public let kRTBErrorDomain: Swift.String
public enum RTBErrorCode : Swift.Int {
  case noFill
  case parse
  case server
  case invalidAsset
  case unsupportedAsset
  case nullAd
  case invalidAd
  case invalidZoneId
  case invalidSignalData
  case notInitialised
  case auctionNoAd
  case renderingBanner
  case renderingInterstitial
  case renderingRewarded
  case mraidPlayer
  case vastPlayer
  case trackingUrl
  case trackingJS
  case invalidUrl
  case internalErrorCode
  case unknown
  case disabledFormat
  case disabledRenderingEngine
  case expiredAd
  case vastParserSchemaValidation
  case vastParserTooManyWrappers
  case vastParserNoCompatibleMediaFile
  case vastParserNoInternetConnection
  case vastParserMovieTooShort
  case adFeedbackFormNotLoaded
  case invalidHTML
  case vastParserNoAdResponse
  case vastParserBothAdAndErrorPresentInRootResponse
  case invalidRemoteConfigData
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class RTBBannerRequestConfiguration : RTBSDK.RTBRequestConfiguration {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public init(placementId: Swift.Int, iTunesAppId: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(RTBSDK.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: RTBSDK.NetworkReachabilityManager.ConnectionType, b: RTBSDK.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (RTBSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: RTBSDK.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: RTBSDK.NetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension RTBSDK.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: RTBSDK.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: RTBSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
@objc public enum RTBGender : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case male
  case female
  case other
  case unknown
  public var rawValue: RTBSDK.RTBGender.RawValue {
    get
  }
  public init?(rawValue: RTBSDK.RTBGender.RawValue)
}
extension RTBSDK.RTBLogLevel : Swift.Equatable {}
extension RTBSDK.RTBLogLevel : Swift.Hashable {}
extension RTBSDK.RTBLogLevel : Swift.RawRepresentable {}
extension RTBSDK.RTBErrorCode : Swift.Equatable {}
extension RTBSDK.RTBErrorCode : Swift.Hashable {}
extension RTBSDK.RTBErrorCode : Swift.RawRepresentable {}
extension RTBSDK.NetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension RTBSDK.NetworkReachabilityManager.ConnectionType : Swift.Hashable {}
extension RTBSDK.RTBGender : Swift.Equatable {}
extension RTBSDK.RTBGender : Swift.Hashable {}
